#!/usr/bin/env kscript

import kotlin.sequences.sequence

data class InitValue(val noun: Int, val verb : Int)

tailrec fun runProgram(instructionPointer : Int, program : Map<Int, Int>, remainingSteps : Int) : Map<Int, Int> {
  val instruction = program.get(instructionPointer)
  //println("Instruction: '${instruction}', program: '${program}'")
  if (remainingSteps <= 0 || instruction != 1 && instruction != 2) {
    return program;
  } else {
    val pos1 = program.get(instructionPointer + 1)
    val arg1 = program?.get(pos1) ?: 0
    val pos2 = program.get(instructionPointer + 2)
    val arg2 = program?.get(pos2) ?: 0

    val resultPointer = program.get(instructionPointer + 3) ?: -1
    val result = if (instruction == 1) (arg1 + arg2) else (arg1 * arg2)
    return runProgram(instructionPointer + 4, program.plus(resultPointer to result), remainingSteps - 1)
    
  }
}

fun runProgramWithInput(program : Map<Int, Int>, init : InitValue) : Int {
  val modifiedProgram = program.plus(1 to init.noun).plus(2 to init.verb)
  val resultingProgram = runProgram(0, modifiedProgram, 10000)
  return resultingProgram.get(0) ?: 0
}

fun compileProgram(code : String?) : Map<Int, Int> {
  if (code == null) {
    return mapOf()
  } else {
    val program = code.trim().split(",").withIndex().map{it.index to it.value.toInt()}.toMap()
    return program
  }
}


fun findInitValues(code : String?, result : Int) : List<InitValue> {
  val program = compileProgram(code)
  val input = sequence {
    for (noun in 0..99) {
      for (verb in 0..99) {
        yield(InitValue(noun, verb))
      }
    }
  }
  return input.filter{runProgramWithInput(program, it) == result}.toList()
}

if (args.size == 1) {
  println("Usage: Call with puzzle input (int program) as first parameter")
  println("A input of ${args[0]} results to: '${findInitValues(args[0], 19690720)}'")
} else {
  println("Reading from stdin, please enter int program")
  val code = readLine()
  val result = findInitValues(code, 19690720)
  println("Total fuel: '${result}'")
}

